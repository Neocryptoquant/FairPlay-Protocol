/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const CAMPAIGN_CONFIG_DISCRIMINATOR = new Uint8Array([
  37, 60, 103, 198, 105, 149, 26, 142,
]);

export function getCampaignConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CAMPAIGN_CONFIG_DISCRIMINATOR
  );
}

export type CampaignConfig = {
  discriminator: ReadonlyUint8Array;
  seed: bigint;
  campaignId: number;
  sponsor: Address;
  vault: Address;
  usdcTokenMint: Address;
  totalPoolAmount: bigint;
  startTime: bigint;
  endTime: bigint;
  isFinalized: boolean;
  totalScore: bigint;
  noOfContributors: number;
  createdAt: bigint;
  bump: number;
};

export type CampaignConfigArgs = {
  seed: number | bigint;
  campaignId: number;
  sponsor: Address;
  vault: Address;
  usdcTokenMint: Address;
  totalPoolAmount: number | bigint;
  startTime: number | bigint;
  endTime: number | bigint;
  isFinalized: boolean;
  totalScore: number | bigint;
  noOfContributors: number;
  createdAt: number | bigint;
  bump: number;
};

export function getCampaignConfigEncoder(): FixedSizeEncoder<CampaignConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['seed', getU64Encoder()],
      ['campaignId', getU8Encoder()],
      ['sponsor', getAddressEncoder()],
      ['vault', getAddressEncoder()],
      ['usdcTokenMint', getAddressEncoder()],
      ['totalPoolAmount', getU128Encoder()],
      ['startTime', getI64Encoder()],
      ['endTime', getI64Encoder()],
      ['isFinalized', getBooleanEncoder()],
      ['totalScore', getU128Encoder()],
      ['noOfContributors', getU32Encoder()],
      ['createdAt', getI64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CAMPAIGN_CONFIG_DISCRIMINATOR })
  );
}

export function getCampaignConfigDecoder(): FixedSizeDecoder<CampaignConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['seed', getU64Decoder()],
    ['campaignId', getU8Decoder()],
    ['sponsor', getAddressDecoder()],
    ['vault', getAddressDecoder()],
    ['usdcTokenMint', getAddressDecoder()],
    ['totalPoolAmount', getU128Decoder()],
    ['startTime', getI64Decoder()],
    ['endTime', getI64Decoder()],
    ['isFinalized', getBooleanDecoder()],
    ['totalScore', getU128Decoder()],
    ['noOfContributors', getU32Decoder()],
    ['createdAt', getI64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getCampaignConfigCodec(): FixedSizeCodec<
  CampaignConfigArgs,
  CampaignConfig
> {
  return combineCodec(getCampaignConfigEncoder(), getCampaignConfigDecoder());
}

export function decodeCampaignConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<CampaignConfig, TAddress>;
export function decodeCampaignConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<CampaignConfig, TAddress>;
export function decodeCampaignConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<CampaignConfig, TAddress> | MaybeAccount<CampaignConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCampaignConfigDecoder()
  );
}

export async function fetchCampaignConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<CampaignConfig, TAddress>> {
  const maybeAccount = await fetchMaybeCampaignConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeCampaignConfig<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<CampaignConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeCampaignConfig(maybeAccount);
}

export async function fetchAllCampaignConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<CampaignConfig>[]> {
  const maybeAccounts = await fetchAllMaybeCampaignConfig(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeCampaignConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<CampaignConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeCampaignConfig(maybeAccount)
  );
}

export function getCampaignConfigSize(): number {
  return 175;
}
