/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const CONTRIBUTOR_STATE_DISCRIMINATOR = new Uint8Array([
  8, 145, 65, 67, 224, 70, 107, 55,
]);

export function getContributorStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CONTRIBUTOR_STATE_DISCRIMINATOR
  );
}

export type ContributorState = {
  discriminator: ReadonlyUint8Array;
  seed: bigint;
  campaignId: number;
  user: Address;
  contributionScore: bigint;
  rewardShare: bigint;
  claimed: boolean;
  createdAt: bigint;
  bump: number;
};

export type ContributorStateArgs = {
  seed: number | bigint;
  campaignId: number;
  user: Address;
  contributionScore: number | bigint;
  rewardShare: number | bigint;
  claimed: boolean;
  createdAt: number | bigint;
  bump: number;
};

export function getContributorStateEncoder(): FixedSizeEncoder<ContributorStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['seed', getU64Encoder()],
      ['campaignId', getU8Encoder()],
      ['user', getAddressEncoder()],
      ['contributionScore', getU128Encoder()],
      ['rewardShare', getU128Encoder()],
      ['claimed', getBooleanEncoder()],
      ['createdAt', getI64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CONTRIBUTOR_STATE_DISCRIMINATOR })
  );
}

export function getContributorStateDecoder(): FixedSizeDecoder<ContributorState> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['seed', getU64Decoder()],
    ['campaignId', getU8Decoder()],
    ['user', getAddressDecoder()],
    ['contributionScore', getU128Decoder()],
    ['rewardShare', getU128Decoder()],
    ['claimed', getBooleanDecoder()],
    ['createdAt', getI64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getContributorStateCodec(): FixedSizeCodec<
  ContributorStateArgs,
  ContributorState
> {
  return combineCodec(
    getContributorStateEncoder(),
    getContributorStateDecoder()
  );
}

export function decodeContributorState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ContributorState, TAddress>;
export function decodeContributorState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ContributorState, TAddress>;
export function decodeContributorState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<ContributorState, TAddress>
  | MaybeAccount<ContributorState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getContributorStateDecoder()
  );
}

export async function fetchContributorState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ContributorState, TAddress>> {
  const maybeAccount = await fetchMaybeContributorState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeContributorState<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ContributorState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeContributorState(maybeAccount);
}

export async function fetchAllContributorState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ContributorState>[]> {
  const maybeAccounts = await fetchAllMaybeContributorState(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeContributorState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ContributorState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeContributorState(maybeAccount)
  );
}

export function getContributorStateSize(): number {
  return 91;
}
