/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { FAIRPLAY_PROGRAM_ADDRESS } from '../programs';

/** IncorrectScores: Check the code for the correct scores */
export const FAIRPLAY_ERROR__INCORRECT_SCORES = 0x1770; // 6000
/** NoTotalScore: there is no summation. Check the code! */
export const FAIRPLAY_ERROR__NO_TOTAL_SCORE = 0x1771; // 6001

export type FairplayError =
  | typeof FAIRPLAY_ERROR__INCORRECT_SCORES
  | typeof FAIRPLAY_ERROR__NO_TOTAL_SCORE;

let fairplayErrorMessages: Record<FairplayError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  fairplayErrorMessages = {
    [FAIRPLAY_ERROR__INCORRECT_SCORES]: `Check the code for the correct scores`,
    [FAIRPLAY_ERROR__NO_TOTAL_SCORE]: `there is no summation. Check the code!`,
  };
}

export function getFairplayErrorMessage(code: FairplayError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (fairplayErrorMessages as Record<FairplayError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isFairplayError<TProgramErrorCode extends FairplayError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    FAIRPLAY_PROGRAM_ADDRESS,
    code
  );
}
