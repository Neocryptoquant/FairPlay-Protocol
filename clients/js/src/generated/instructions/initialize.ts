/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { FAIRPLAY_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_DISCRIMINATOR = new Uint8Array([
  175, 175, 109, 31, 13, 152, 155, 237,
]);

export function getInitializeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(INITIALIZE_DISCRIMINATOR);
}

export type InitializeInstruction<
  TProgram extends string = typeof FAIRPLAY_PROGRAM_ADDRESS,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSponsor extends string | AccountMeta<string> = string,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountUsdcTokenMint extends string | AccountMeta<string> = string,
  TAccountEscrow extends string | AccountMeta<string> = string,
  TAccountCampaignConfig extends string | AccountMeta<string> = string,
  TAccountContributor extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSponsor extends string
        ? WritableSignerAccount<TAccountSponsor> &
            AccountSignerMeta<TAccountSponsor>
        : TAccountSponsor,
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountUsdcTokenMint extends string
        ? ReadonlyAccount<TAccountUsdcTokenMint>
        : TAccountUsdcTokenMint,
      TAccountEscrow extends string
        ? WritableAccount<TAccountEscrow>
        : TAccountEscrow,
      TAccountCampaignConfig extends string
        ? WritableAccount<TAccountCampaignConfig>
        : TAccountCampaignConfig,
      TAccountContributor extends string
        ? WritableAccount<TAccountContributor>
        : TAccountContributor,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeInstructionData = {
  discriminator: ReadonlyUint8Array;
  seed: bigint;
  campaignId: number;
  totalPoolAmount: bigint;
  startTime: bigint;
  endTime: bigint;
  totalScore: bigint;
  noOfContributors: number;
  createdAt: bigint;
};

export type InitializeInstructionDataArgs = {
  seed: number | bigint;
  campaignId: number;
  totalPoolAmount: number | bigint;
  startTime: number | bigint;
  endTime: number | bigint;
  totalScore: number | bigint;
  noOfContributors: number;
  createdAt: number | bigint;
};

export function getInitializeInstructionDataEncoder(): FixedSizeEncoder<InitializeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['seed', getU64Encoder()],
      ['campaignId', getU8Encoder()],
      ['totalPoolAmount', getU128Encoder()],
      ['startTime', getI64Encoder()],
      ['endTime', getI64Encoder()],
      ['totalScore', getU128Encoder()],
      ['noOfContributors', getU32Encoder()],
      ['createdAt', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_DISCRIMINATOR })
  );
}

export function getInitializeInstructionDataDecoder(): FixedSizeDecoder<InitializeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['seed', getU64Decoder()],
    ['campaignId', getU8Decoder()],
    ['totalPoolAmount', getU128Decoder()],
    ['startTime', getI64Decoder()],
    ['endTime', getI64Decoder()],
    ['totalScore', getU128Decoder()],
    ['noOfContributors', getU32Decoder()],
    ['createdAt', getI64Decoder()],
  ]);
}

export function getInitializeInstructionDataCodec(): FixedSizeCodec<
  InitializeInstructionDataArgs,
  InitializeInstructionData
> {
  return combineCodec(
    getInitializeInstructionDataEncoder(),
    getInitializeInstructionDataDecoder()
  );
}

export type InitializeAsyncInput<
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSponsor extends string = string,
  TAccountUser extends string = string,
  TAccountUsdcTokenMint extends string = string,
  TAccountEscrow extends string = string,
  TAccountCampaignConfig extends string = string,
  TAccountContributor extends string = string,
  TAccountVault extends string = string,
> = {
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  sponsor: TransactionSigner<TAccountSponsor>;
  user: TransactionSigner<TAccountUser>;
  usdcTokenMint: Address<TAccountUsdcTokenMint>;
  escrow?: Address<TAccountEscrow>;
  campaignConfig?: Address<TAccountCampaignConfig>;
  contributor?: Address<TAccountContributor>;
  vault?: Address<TAccountVault>;
  seed: InitializeInstructionDataArgs['seed'];
  campaignId: InitializeInstructionDataArgs['campaignId'];
  totalPoolAmount: InitializeInstructionDataArgs['totalPoolAmount'];
  startTime: InitializeInstructionDataArgs['startTime'];
  endTime: InitializeInstructionDataArgs['endTime'];
  totalScore: InitializeInstructionDataArgs['totalScore'];
  noOfContributors: InitializeInstructionDataArgs['noOfContributors'];
  createdAt: InitializeInstructionDataArgs['createdAt'];
};

export async function getInitializeInstructionAsync<
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSponsor extends string,
  TAccountUser extends string,
  TAccountUsdcTokenMint extends string,
  TAccountEscrow extends string,
  TAccountCampaignConfig extends string,
  TAccountContributor extends string,
  TAccountVault extends string,
  TProgramAddress extends Address = typeof FAIRPLAY_PROGRAM_ADDRESS,
>(
  input: InitializeAsyncInput<
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSponsor,
    TAccountUser,
    TAccountUsdcTokenMint,
    TAccountEscrow,
    TAccountCampaignConfig,
    TAccountContributor,
    TAccountVault
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeInstruction<
    TProgramAddress,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSponsor,
    TAccountUser,
    TAccountUsdcTokenMint,
    TAccountEscrow,
    TAccountCampaignConfig,
    TAccountContributor,
    TAccountVault
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? FAIRPLAY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    sponsor: { value: input.sponsor ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: true },
    usdcTokenMint: { value: input.usdcTokenMint ?? null, isWritable: false },
    escrow: { value: input.escrow ?? null, isWritable: true },
    campaignConfig: { value: input.campaignConfig ?? null, isWritable: true },
    contributor: { value: input.contributor ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.escrow.value) {
    accounts.escrow.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([101, 115, 99, 114, 111, 119])),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
        getU64Encoder().encode(expectSome(args.seed)),
      ],
    });
  }
  if (!accounts.campaignConfig.value) {
    accounts.campaignConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            67, 97, 109, 112, 97, 105, 103, 110, 67, 111, 110, 102, 105, 103,
          ])
        ),
        getU64Encoder().encode(expectSome(args.seed)),
      ],
    });
  }
  if (!accounts.contributor.value) {
    accounts.contributor.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([67, 111, 110, 116, 114, 105, 98, 117, 116, 111, 114])
        ),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.escrow.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.usdcTokenMint.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.sponsor),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.usdcTokenMint),
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.campaignConfig),
      getAccountMeta(accounts.contributor),
      getAccountMeta(accounts.vault),
    ],
    programAddress,
    data: getInitializeInstructionDataEncoder().encode(
      args as InitializeInstructionDataArgs
    ),
  } as InitializeInstruction<
    TProgramAddress,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSponsor,
    TAccountUser,
    TAccountUsdcTokenMint,
    TAccountEscrow,
    TAccountCampaignConfig,
    TAccountContributor,
    TAccountVault
  >;

  return instruction;
}

export type InitializeInput<
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSponsor extends string = string,
  TAccountUser extends string = string,
  TAccountUsdcTokenMint extends string = string,
  TAccountEscrow extends string = string,
  TAccountCampaignConfig extends string = string,
  TAccountContributor extends string = string,
  TAccountVault extends string = string,
> = {
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  sponsor: TransactionSigner<TAccountSponsor>;
  user: TransactionSigner<TAccountUser>;
  usdcTokenMint: Address<TAccountUsdcTokenMint>;
  escrow: Address<TAccountEscrow>;
  campaignConfig: Address<TAccountCampaignConfig>;
  contributor: Address<TAccountContributor>;
  vault: Address<TAccountVault>;
  seed: InitializeInstructionDataArgs['seed'];
  campaignId: InitializeInstructionDataArgs['campaignId'];
  totalPoolAmount: InitializeInstructionDataArgs['totalPoolAmount'];
  startTime: InitializeInstructionDataArgs['startTime'];
  endTime: InitializeInstructionDataArgs['endTime'];
  totalScore: InitializeInstructionDataArgs['totalScore'];
  noOfContributors: InitializeInstructionDataArgs['noOfContributors'];
  createdAt: InitializeInstructionDataArgs['createdAt'];
};

export function getInitializeInstruction<
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSponsor extends string,
  TAccountUser extends string,
  TAccountUsdcTokenMint extends string,
  TAccountEscrow extends string,
  TAccountCampaignConfig extends string,
  TAccountContributor extends string,
  TAccountVault extends string,
  TProgramAddress extends Address = typeof FAIRPLAY_PROGRAM_ADDRESS,
>(
  input: InitializeInput<
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSponsor,
    TAccountUser,
    TAccountUsdcTokenMint,
    TAccountEscrow,
    TAccountCampaignConfig,
    TAccountContributor,
    TAccountVault
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeInstruction<
  TProgramAddress,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSponsor,
  TAccountUser,
  TAccountUsdcTokenMint,
  TAccountEscrow,
  TAccountCampaignConfig,
  TAccountContributor,
  TAccountVault
> {
  // Program address.
  const programAddress = config?.programAddress ?? FAIRPLAY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    sponsor: { value: input.sponsor ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: true },
    usdcTokenMint: { value: input.usdcTokenMint ?? null, isWritable: false },
    escrow: { value: input.escrow ?? null, isWritable: true },
    campaignConfig: { value: input.campaignConfig ?? null, isWritable: true },
    contributor: { value: input.contributor ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.sponsor),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.usdcTokenMint),
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.campaignConfig),
      getAccountMeta(accounts.contributor),
      getAccountMeta(accounts.vault),
    ],
    programAddress,
    data: getInitializeInstructionDataEncoder().encode(
      args as InitializeInstructionDataArgs
    ),
  } as InitializeInstruction<
    TProgramAddress,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSponsor,
    TAccountUser,
    TAccountUsdcTokenMint,
    TAccountEscrow,
    TAccountCampaignConfig,
    TAccountContributor,
    TAccountVault
  >;

  return instruction;
}

export type ParsedInitializeInstruction<
  TProgram extends string = typeof FAIRPLAY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    systemProgram: TAccountMetas[0];
    tokenProgram: TAccountMetas[1];
    associatedTokenProgram: TAccountMetas[2];
    sponsor: TAccountMetas[3];
    user: TAccountMetas[4];
    usdcTokenMint: TAccountMetas[5];
    escrow: TAccountMetas[6];
    campaignConfig: TAccountMetas[7];
    contributor: TAccountMetas[8];
    vault: TAccountMetas[9];
  };
  data: InitializeInstructionData;
};

export function parseInitializeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      sponsor: getNextAccount(),
      user: getNextAccount(),
      usdcTokenMint: getNextAccount(),
      escrow: getNextAccount(),
      campaignConfig: getNextAccount(),
      contributor: getNextAccount(),
      vault: getNextAccount(),
    },
    data: getInitializeInstructionDataDecoder().decode(instruction.data),
  };
}
