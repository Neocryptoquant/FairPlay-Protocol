/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedAssignScoreInstruction,
  type ParsedClaimRewardInstruction,
  type ParsedDepositInstruction,
  type ParsedInitializeInstruction,
  type ParsedScoringEngineInstruction,
} from '../instructions';

export const FAIRPLAY_PROGRAM_ADDRESS =
  '3qwWMVMuLXq6TXA7QFEXPL8Ajwua6nZ8a6odXqE8431E' as Address<'3qwWMVMuLXq6TXA7QFEXPL8Ajwua6nZ8a6odXqE8431E'>;

export enum FairplayAccount {
  CampaignConfig,
  ContributorState,
  Escrow,
}

export function identifyFairplayAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): FairplayAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([37, 60, 103, 198, 105, 149, 26, 142])
      ),
      0
    )
  ) {
    return FairplayAccount.CampaignConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([8, 145, 65, 67, 224, 70, 107, 55])
      ),
      0
    )
  ) {
    return FairplayAccount.ContributorState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([31, 213, 123, 187, 186, 22, 218, 155])
      ),
      0
    )
  ) {
    return FairplayAccount.Escrow;
  }
  throw new Error(
    'The provided account could not be identified as a fairplay account.'
  );
}

export enum FairplayInstruction {
  AssignScore,
  ClaimReward,
  Deposit,
  Initialize,
  ScoringEngine,
}

export function identifyFairplayInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): FairplayInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([228, 170, 169, 248, 127, 170, 0, 110])
      ),
      0
    )
  ) {
    return FairplayInstruction.AssignScore;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([149, 95, 181, 242, 94, 90, 158, 162])
      ),
      0
    )
  ) {
    return FairplayInstruction.ClaimReward;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([242, 35, 198, 137, 82, 225, 242, 182])
      ),
      0
    )
  ) {
    return FairplayInstruction.Deposit;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return FairplayInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([20, 33, 54, 21, 184, 118, 231, 129])
      ),
      0
    )
  ) {
    return FairplayInstruction.ScoringEngine;
  }
  throw new Error(
    'The provided instruction could not be identified as a fairplay instruction.'
  );
}

export type ParsedFairplayInstruction<
  TProgram extends string = '3qwWMVMuLXq6TXA7QFEXPL8Ajwua6nZ8a6odXqE8431E',
> =
  | ({
      instructionType: FairplayInstruction.AssignScore;
    } & ParsedAssignScoreInstruction<TProgram>)
  | ({
      instructionType: FairplayInstruction.ClaimReward;
    } & ParsedClaimRewardInstruction<TProgram>)
  | ({
      instructionType: FairplayInstruction.Deposit;
    } & ParsedDepositInstruction<TProgram>)
  | ({
      instructionType: FairplayInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: FairplayInstruction.ScoringEngine;
    } & ParsedScoringEngineInstruction<TProgram>);
